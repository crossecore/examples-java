import {EFactory} from "ecore/EFactory";
import {ForStatement} from "./ForStatement";
import {AnnotationMemberValuePair} from "./AnnotationMemberValuePair";
import {InstanceofExpression} from "./InstanceofExpression";
import {MemberRef} from "./MemberRef";
import {CompilationUnit} from "./CompilationUnit";
import {PrimitiveTypeShort} from "./PrimitiveTypeShort";
import {WildCardType} from "./WildCardType";
import {MethodInvocation} from "./MethodInvocation";
import {VariableDeclarationFragment} from "./VariableDeclarationFragment";
import {ConstructorDeclaration} from "./ConstructorDeclaration";
import {SuperConstructorInvocation} from "./SuperConstructorInvocation";
import {ContinueStatement} from "./ContinueStatement";
import {AbstractMethodInvocation} from "./AbstractMethodInvocation";
import {AbstractTypeDeclaration} from "./AbstractTypeDeclaration";
import {TextElement} from "./TextElement";
import {SwitchCase} from "./SwitchCase";
import {Statement} from "./Statement";
import {TypeDeclaration} from "./TypeDeclaration";
import {ClassFile} from "./ClassFile";
import {TypeParameter} from "./TypeParameter";
import {PrimitiveTypeVoid} from "./PrimitiveTypeVoid";
import {ThrowStatement} from "./ThrowStatement";
import {ThisExpression} from "./ThisExpression";
import {PostfixExpression} from "./PostfixExpression";
import {AbstractVariablesContainer} from "./AbstractVariablesContainer";
import {EnumConstantDeclaration} from "./EnumConstantDeclaration";
import {Archive} from "./Archive";
import {LineComment} from "./LineComment";
import {Package} from "./Package";
import {UnresolvedClassDeclaration} from "./UnresolvedClassDeclaration";
import {PrimitiveTypeLong} from "./PrimitiveTypeLong";
import {SingleVariableDeclaration} from "./SingleVariableDeclaration";
import {Modifier} from "./Modifier";
import {ArrayLengthAccess} from "./ArrayLengthAccess";
import {MethodDeclaration} from "./MethodDeclaration";
import {UnresolvedAnnotationTypeMemberDeclaration} from "./UnresolvedAnnotationTypeMemberDeclaration";
import {VariableDeclarationExpression} from "./VariableDeclarationExpression";
import {ManifestEntry} from "./ManifestEntry";
import {NullLiteral} from "./NullLiteral";
import {ParameterizedType} from "./ParameterizedType";
import {LabeledStatement} from "./LabeledStatement";
import {PrimitiveTypeDouble} from "./PrimitiveTypeDouble";
import {Annotation} from "./Annotation";
import {InterfaceDeclaration} from "./InterfaceDeclaration";
import {ReturnStatement} from "./ReturnStatement";
import {CharacterLiteral} from "./CharacterLiteral";
import {ClassInstanceCreation} from "./ClassInstanceCreation";
import {EnhancedForStatement} from "./EnhancedForStatement";
import {UnresolvedLabeledStatement} from "./UnresolvedLabeledStatement";
import {FieldAccess} from "./FieldAccess";
import {NamedElement} from "./NamedElement";
import {PrimitiveTypeChar} from "./PrimitiveTypeChar";
import {BodyDeclaration} from "./BodyDeclaration";
import {Javadoc} from "./Javadoc";
import {UnresolvedEnumDeclaration} from "./UnresolvedEnumDeclaration";
import {ArrayCreation} from "./ArrayCreation";
import {TypeDeclarationStatement} from "./TypeDeclarationStatement";
import {ArrayType} from "./ArrayType";
import {UnresolvedInterfaceDeclaration} from "./UnresolvedInterfaceDeclaration";
import {NumberLiteral} from "./NumberLiteral";
import {AbstractMethodDeclaration} from "./AbstractMethodDeclaration";
import {ImportDeclaration} from "./ImportDeclaration";
import {PrimitiveTypeFloat} from "./PrimitiveTypeFloat";
import {ConditionalExpression} from "./ConditionalExpression";
import {VariableDeclarationStatement} from "./VariableDeclarationStatement";
import {Block} from "./Block";
import {Model} from "./Model";
import {BooleanLiteral} from "./BooleanLiteral";
import {AbstractTypeQualifiedExpression} from "./AbstractTypeQualifiedExpression";
import {AnonymousClassDeclaration} from "./AnonymousClassDeclaration";
import {IfStatement} from "./IfStatement";
import {UnresolvedAnnotationDeclaration} from "./UnresolvedAnnotationDeclaration";
import {PrefixExpression} from "./PrefixExpression";
import {ClassDeclaration} from "./ClassDeclaration";
import {Type} from "./Type";
import {ASTNode} from "./ASTNode";
import {BreakStatement} from "./BreakStatement";
import {UnresolvedItem} from "./UnresolvedItem";
import {BlockComment} from "./BlockComment";
import {ArrayAccess} from "./ArrayAccess";
import {TypeAccess} from "./TypeAccess";
import {WhileStatement} from "./WhileStatement";
import {CatchClause} from "./CatchClause";
import {UnresolvedSingleVariableDeclaration} from "./UnresolvedSingleVariableDeclaration";
import {NamespaceAccess} from "./NamespaceAccess";
import {CastExpression} from "./CastExpression";
import {Expression} from "./Expression";
import {ParenthesizedExpression} from "./ParenthesizedExpression";
import {SuperFieldAccess} from "./SuperFieldAccess";
import {ConstructorInvocation} from "./ConstructorInvocation";
import {SingleVariableAccess} from "./SingleVariableAccess";
import {MethodRef} from "./MethodRef";
import {AnnotationTypeDeclaration} from "./AnnotationTypeDeclaration";
import {DoStatement} from "./DoStatement";
import {EnumDeclaration} from "./EnumDeclaration";
import {SuperMethodInvocation} from "./SuperMethodInvocation";
import {StringLiteral} from "./StringLiteral";
import {UnresolvedTypeDeclaration} from "./UnresolvedTypeDeclaration";
import {Comment} from "./Comment";
import {TypeLiteral} from "./TypeLiteral";
import {Initializer} from "./Initializer";
import {PrimitiveType} from "./PrimitiveType";
import {AssertStatement} from "./AssertStatement";
import {FieldDeclaration} from "./FieldDeclaration";
import {PackageAccess} from "./PackageAccess";
import {VariableDeclaration} from "./VariableDeclaration";
import {UnresolvedVariableDeclarationFragment} from "./UnresolvedVariableDeclarationFragment";
import {ManifestAttribute} from "./ManifestAttribute";
import {UnresolvedMethodDeclaration} from "./UnresolvedMethodDeclaration";
import {Manifest} from "./Manifest";
import {SwitchStatement} from "./SwitchStatement";
import {PrimitiveTypeInt} from "./PrimitiveTypeInt";
import {SynchronizedStatement} from "./SynchronizedStatement";
import {ArrayInitializer} from "./ArrayInitializer";
import {PrimitiveTypeByte} from "./PrimitiveTypeByte";
import {UnresolvedItemAccess} from "./UnresolvedItemAccess";
import {MethodRefParameter} from "./MethodRefParameter";
import {TryStatement} from "./TryStatement";
import {Assignment} from "./Assignment";
import {InfixExpression} from "./InfixExpression";
import {AnnotationTypeMemberDeclaration} from "./AnnotationTypeMemberDeclaration";
import {PrimitiveTypeBoolean} from "./PrimitiveTypeBoolean";
import {EmptyStatement} from "./EmptyStatement";
import {UnresolvedType} from "./UnresolvedType";
import {TagElement} from "./TagElement";
import {ExpressionStatement} from "./ExpressionStatement";
export interface Java_Factory extends EFactory{
	createAbstractMethodDeclaration():AbstractMethodDeclaration;
	createAbstractMethodInvocation():AbstractMethodInvocation;
	createAbstractTypeDeclaration():AbstractTypeDeclaration;
	createAbstractTypeQualifiedExpression():AbstractTypeQualifiedExpression;
	createAbstractVariablesContainer():AbstractVariablesContainer;
	createAnnotation():Annotation;
	createArchive():Archive;
	createAssertStatement():AssertStatement;
	createASTNode():ASTNode;
	createAnnotationMemberValuePair():AnnotationMemberValuePair;
	createAnnotationTypeDeclaration():AnnotationTypeDeclaration;
	createAnnotationTypeMemberDeclaration():AnnotationTypeMemberDeclaration;
	createAnonymousClassDeclaration():AnonymousClassDeclaration;
	createArrayAccess():ArrayAccess;
	createArrayCreation():ArrayCreation;
	createArrayInitializer():ArrayInitializer;
	createArrayLengthAccess():ArrayLengthAccess;
	createArrayType():ArrayType;
	createAssignment():Assignment;
	createBodyDeclaration():BodyDeclaration;
	createBooleanLiteral():BooleanLiteral;
	createBlockComment():BlockComment;
	createBlock():Block;
	createBreakStatement():BreakStatement;
	createCastExpression():CastExpression;
	createCatchClause():CatchClause;
	createCharacterLiteral():CharacterLiteral;
	createClassFile():ClassFile;
	createClassInstanceCreation():ClassInstanceCreation;
	createConstructorDeclaration():ConstructorDeclaration;
	createConditionalExpression():ConditionalExpression;
	createConstructorInvocation():ConstructorInvocation;
	createClassDeclaration():ClassDeclaration;
	createComment():Comment;
	createCompilationUnit():CompilationUnit;
	createContinueStatement():ContinueStatement;
	createDoStatement():DoStatement;
	createEmptyStatement():EmptyStatement;
	createEnhancedForStatement():EnhancedForStatement;
	createEnumConstantDeclaration():EnumConstantDeclaration;
	createEnumDeclaration():EnumDeclaration;
	createExpression():Expression;
	createExpressionStatement():ExpressionStatement;
	createFieldAccess():FieldAccess;
	createFieldDeclaration():FieldDeclaration;
	createForStatement():ForStatement;
	createIfStatement():IfStatement;
	createImportDeclaration():ImportDeclaration;
	createInfixExpression():InfixExpression;
	createInitializer():Initializer;
	createInstanceofExpression():InstanceofExpression;
	createInterfaceDeclaration():InterfaceDeclaration;
	createJavadoc():Javadoc;
	createLabeledStatement():LabeledStatement;
	createLineComment():LineComment;
	createManifest():Manifest;
	createManifestAttribute():ManifestAttribute;
	createManifestEntry():ManifestEntry;
	createMemberRef():MemberRef;
	createMethodDeclaration():MethodDeclaration;
	createMethodInvocation():MethodInvocation;
	createMethodRef():MethodRef;
	createMethodRefParameter():MethodRefParameter;
	createModel():Model;
	createModifier():Modifier;
	createNamedElement():NamedElement;
	createNamespaceAccess():NamespaceAccess;
	createNumberLiteral():NumberLiteral;
	createNullLiteral():NullLiteral;
	createPackage():Package;
	createPackageAccess():PackageAccess;
	createParameterizedType():ParameterizedType;
	createParenthesizedExpression():ParenthesizedExpression;
	createPostfixExpression():PostfixExpression;
	createPrefixExpression():PrefixExpression;
	createPrimitiveType():PrimitiveType;
	createPrimitiveTypeBoolean():PrimitiveTypeBoolean;
	createPrimitiveTypeByte():PrimitiveTypeByte;
	createPrimitiveTypeChar():PrimitiveTypeChar;
	createPrimitiveTypeDouble():PrimitiveTypeDouble;
	createPrimitiveTypeShort():PrimitiveTypeShort;
	createPrimitiveTypeFloat():PrimitiveTypeFloat;
	createPrimitiveTypeInt():PrimitiveTypeInt;
	createPrimitiveTypeLong():PrimitiveTypeLong;
	createPrimitiveTypeVoid():PrimitiveTypeVoid;
	createReturnStatement():ReturnStatement;
	createSingleVariableAccess():SingleVariableAccess;
	createSingleVariableDeclaration():SingleVariableDeclaration;
	createStatement():Statement;
	createStringLiteral():StringLiteral;
	createSuperConstructorInvocation():SuperConstructorInvocation;
	createSuperFieldAccess():SuperFieldAccess;
	createSuperMethodInvocation():SuperMethodInvocation;
	createSwitchCase():SwitchCase;
	createSwitchStatement():SwitchStatement;
	createSynchronizedStatement():SynchronizedStatement;
	createTagElement():TagElement;
	createTextElement():TextElement;
	createThisExpression():ThisExpression;
	createThrowStatement():ThrowStatement;
	createTryStatement():TryStatement;
	createType():Type;
	createTypeAccess():TypeAccess;
	createTypeDeclaration():TypeDeclaration;
	createTypeDeclarationStatement():TypeDeclarationStatement;
	createTypeLiteral():TypeLiteral;
	createTypeParameter():TypeParameter;
	createUnresolvedItem():UnresolvedItem;
	createUnresolvedItemAccess():UnresolvedItemAccess;
	createUnresolvedAnnotationDeclaration():UnresolvedAnnotationDeclaration;
	createUnresolvedAnnotationTypeMemberDeclaration():UnresolvedAnnotationTypeMemberDeclaration;
	createUnresolvedClassDeclaration():UnresolvedClassDeclaration;
	createUnresolvedEnumDeclaration():UnresolvedEnumDeclaration;
	createUnresolvedInterfaceDeclaration():UnresolvedInterfaceDeclaration;
	createUnresolvedLabeledStatement():UnresolvedLabeledStatement;
	createUnresolvedMethodDeclaration():UnresolvedMethodDeclaration;
	createUnresolvedSingleVariableDeclaration():UnresolvedSingleVariableDeclaration;
	createUnresolvedType():UnresolvedType;
	createUnresolvedTypeDeclaration():UnresolvedTypeDeclaration;
	createUnresolvedVariableDeclarationFragment():UnresolvedVariableDeclarationFragment;
	createVariableDeclaration():VariableDeclaration;
	createVariableDeclarationExpression():VariableDeclarationExpression;
	createVariableDeclarationFragment():VariableDeclarationFragment;
	createVariableDeclarationStatement():VariableDeclarationStatement;
	createWildCardType():WildCardType;
	createWhileStatement():WhileStatement;
}
