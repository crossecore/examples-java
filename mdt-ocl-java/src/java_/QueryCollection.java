/**
 */
package java_;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Query Collection</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see java_.Java_Package#getQueryCollection()
 * @model
 * @generated
 */
public interface QueryCollection extends EObject {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * ClassDeclaration.allInstances()\n * -&gt;collect(bodyDeclarations)\n * -&gt;select(each | each.oclIsTypeOf(MethodDeclaration))\n * -&gt;select(each |\n *   not each.modifier.oclIsUndefined() and\n *   not each.modifier.visibility.oclIsUndefined() and\n *   (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n *   ))\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_ClassDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_ClassDeclaration, null);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; allInstances = &lt;%org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation%&gt;.INSTANCE.evaluate(executor, &lt;%java_.Java_Tables%&gt;.SET_CLSSid_ClassDeclaration, TYP_java__c_c_ClassDeclaration_0);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1 = allInstances.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect;\nwhile (true) {\n\tif (!ITERATOR__1.hasNext()) {\n\t\tcollect = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ClassDeclaration%&gt; _1 = (&lt;%java_.ClassDeclaration%&gt;)ITERATOR__1.next();\n\t/**\n\t * bodyDeclarations\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; bodyDeclarations = _1.getBodyDeclarations();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\n\t//\n\tfor (Object value : BOXED_bodyDeclarations.flatten().getElements()) {\n\t\taccumulator.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = collect.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_0;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect_0 = accumulator_0;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each.next();\n\t/**\n\t * each.oclIsTypeOf(MethodDeclaration)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each, TYP_java__c_c_MethodDeclaration_0).booleanValue();\n\t//\n\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_0.add(each);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_0 = select_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each_0.hasNext()) {\n\t\tselect = accumulator_1;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each_0 = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each_0.next();\n\t/**\n\t *\n\t * not each.modifier.oclIsUndefined() and\n\t * not each.modifier.visibility.oclIsUndefined() and\n\t * (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n\t * )\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier = each_0.getModifier();\n\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined = modifier == null;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined);\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_visibility;\n\t\ttry {\n\t\t\tif (modifier == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility = modifier.getVisibility();\n\t\t\tCAUGHT_visibility = visibility;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_visibility = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined_0 = CAUGHT_visibility instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined_0);\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(not, not_0);\n\t\tCAUGHT_and = and;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_or;\n\ttry {\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_1 = each_0.getModifier();\n\t\t\tif (modifier_1 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_0 = modifier_1.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_0 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_0.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq = BOXED_visibility_0 == &lt;%java_.Java_Tables%&gt;.ELITid_private;\n\t\t\tCAUGHT_eq = eq;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_0;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_2 = each_0.getModifier();\n\t\t\tif (modifier_2 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_1 = modifier_2.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_1 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_1.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility_1 == &lt;%java_.Java_Tables%&gt;.ELITid_protected;\n\t\t\tCAUGHT_eq_0 = eq_0;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; or = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanOrOperation%&gt;.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_eq_0);\n\t\tCAUGHT_or = or;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_or = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, CAUGHT_or);\n\tif (and_0 == null) {\n\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null body for \\\'Bag(T).select(Bag.T[?] | Lambda T() : Boolean[1]) : Bag(T)\\\'\");\n\t}\n\t//\n\tif (and_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_1.add(each_0);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.BodyDeclaration%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<BodyDeclaration> thrownExceptions();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * TypeDeclaration.allInstances()\n * -&gt;select(each |\n *   each.bodyDeclarations-&gt;exists(bd |\n *     bd.oclIsTypeOf(MethodDeclaration) and\n *     not bd.modifier.oclIsUndefined() and bd.modifier.static and\n *     not bd.oclAsType(MethodDeclaration)\n *     .returnType.oclIsUndefined() and\n *     bd.oclAsType(MethodDeclaration).returnType.type = each))\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_TypeDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_TypeDeclaration, null);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; allInstances = &lt;%org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation%&gt;.INSTANCE.evaluate(executor, &lt;%java_.Java_Tables%&gt;.SET_CLSSid_TypeDeclaration, TYP_java__c_c_TypeDeclaration_0);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createSetAccumulatorValue(&lt;%java_.Java_Tables%&gt;.SET_CLSSid_TypeDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = allInstances.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.TypeDeclaration%&gt; each = (&lt;%java_.TypeDeclaration%&gt;)ITERATOR_each.next();\n\t/**\n\t *\n\t * each.bodyDeclarations-&gt;exists(bd |\n\t *   bd.oclIsTypeOf(MethodDeclaration) and\n\t *   not bd.modifier.oclIsUndefined() and bd.modifier.static and\n\t *   not bd.oclAsType(MethodDeclaration)\n\t *   .returnType.oclIsUndefined() and\n\t *   bd.oclAsType(MethodDeclaration).returnType.type = each)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; bodyDeclarations = each.getBodyDeclarations();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\n\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_bd = BOXED_bodyDeclarations.iterator();\n\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\twhile (true) {\n\t\tif (!ITERATOR_bd.hasNext()) {\n\t\t\tif (accumulator_0 == null) {\n\t\t\t\texists = null;\n\t\t\t}\n\t\t\telse if (accumulator_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator_0;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; bd = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_bd.next();\n\t\t/**\n\t\t *\n\t\t * bd.oclIsTypeOf(MethodDeclaration) and\n\t\t * not bd.modifier.oclIsUndefined() and bd.modifier.static and\n\t\t * not bd.oclAsType(MethodDeclaration)\n\t\t * .returnType.oclIsUndefined() and\n\t\t * bd.oclAsType(MethodDeclaration).returnType.type = each\n\t\t \052/\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_2;\n\t\ttry {\n\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\ttry {\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\ttry {\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\t\t\t\t\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, bd, TYP_java__c_c_MethodDeclaration_0).booleanValue();\n\t\t\t\t\t/*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; and;\n\t\t\t\t\tif (oclIsTypeOf) {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier = bd.getModifier();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined = modifier == null;\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined);\n\t\t\t\t\t\tand = not;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_symbol_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_0 = bd.getModifier();\n\t\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::static\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean symbol_0 = modifier_0.isStatic();\n\t\t\t\t\t\tCAUGHT_symbol_0 = symbol_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_symbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(and, CAUGHT_symbol_0);\n\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_returnType;\n\t\t\t\ttry {\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_1 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java_.MethodDeclaration%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%java_.MethodDeclaration%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, bd, TYP_java__c_c_MethodDeclaration_1));\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java_.TypeAccess%&gt; returnType = oclAsType.getReturnType();\n\t\t\t\t\tCAUGHT_returnType = returnType;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_returnType = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined_0 = (CAUGHT_returnType == null) || (CAUGHT_returnType instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;);\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined_0);\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, not_0);\n\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq;\n\t\t\ttry {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_2 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java_.MethodDeclaration%&gt; oclAsType_0 = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%java_.MethodDeclaration%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, bd, TYP_java__c_c_MethodDeclaration_2));\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java_.TypeAccess%&gt; returnType_0 = oclAsType_0.getReturnType();\n\t\t\t\tif (returnType_0 == null) {\n\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::TypeAccess::type\\\'\");\n\t\t\t\t}\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java_.Type%&gt; type = returnType_0.getType();\n\t\t\t\tfinal /*@Thrown\052/ boolean eq = type.equals(each);\n\t\t\t\tCAUGHT_eq = eq;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_eq = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_2 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_1, CAUGHT_eq);\n\t\t\tCAUGHT_and_2 = and_2;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_and_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t//\n\t\tif (CAUGHT_and_2 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t}\n\t\telse if (CAUGHT_and_2 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t}\n\t\telse if (CAUGHT_and_2 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\tif (accumulator_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\taccumulator_0 = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t}\n\t\t}\n\t\telse if (CAUGHT_and_2 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\taccumulator_0 = CAUGHT_and_2;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\taccumulator_0 = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t}\n\t}\n\tif (exists == null) {\n\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null body for \\\'Set(T).select(Set.T[?] | Lambda T() : Boolean[1]) : Set(T)\\\'\");\n\t}\n\t//\n\tif (exists == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator.add(each);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.TypeDeclaration%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.TypeDeclaration%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.TypeDeclaration%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<TypeDeclaration> grabats09();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * ClassDeclaration.allInstances()\n * -&gt;collect(bodyDeclarations)\n * -&gt;select(each | each.oclIsTypeOf(MethodDeclaration))\n * -&gt;select(each |\n *   not each.modifier.oclIsUndefined() and\n *   not each.modifier.visibility.oclIsUndefined() and\n *   (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n *   ))\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_ClassDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_ClassDeclaration, null);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; allInstances = &lt;%org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation%&gt;.INSTANCE.evaluate(executor, &lt;%java_.Java_Tables%&gt;.SET_CLSSid_ClassDeclaration, TYP_java__c_c_ClassDeclaration_0);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1 = allInstances.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect;\nwhile (true) {\n\tif (!ITERATOR__1.hasNext()) {\n\t\tcollect = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ClassDeclaration%&gt; _1 = (&lt;%java_.ClassDeclaration%&gt;)ITERATOR__1.next();\n\t/**\n\t * bodyDeclarations\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; bodyDeclarations = _1.getBodyDeclarations();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\n\t//\n\tfor (Object value : BOXED_bodyDeclarations.flatten().getElements()) {\n\t\taccumulator.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = collect.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_0;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect_0 = accumulator_0;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each.next();\n\t/**\n\t * each.oclIsTypeOf(MethodDeclaration)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each, TYP_java__c_c_MethodDeclaration_0).booleanValue();\n\t//\n\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_0.add(each);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_0 = select_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each_0.hasNext()) {\n\t\tselect = accumulator_1;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each_0 = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each_0.next();\n\t/**\n\t *\n\t * not each.modifier.oclIsUndefined() and\n\t * not each.modifier.visibility.oclIsUndefined() and\n\t * (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n\t * )\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier = each_0.getModifier();\n\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined = modifier == null;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined);\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_visibility;\n\t\ttry {\n\t\t\tif (modifier == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility = modifier.getVisibility();\n\t\t\tCAUGHT_visibility = visibility;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_visibility = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@NonInvalid\052/ boolean oclIsUndefined_0 = CAUGHT_visibility instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(oclIsUndefined_0);\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(not, not_0);\n\t\tCAUGHT_and = and;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_or;\n\ttry {\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_1 = each_0.getModifier();\n\t\t\tif (modifier_1 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_0 = modifier_1.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_0 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_0.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq = BOXED_visibility_0 == &lt;%java_.Java_Tables%&gt;.ELITid_private;\n\t\t\tCAUGHT_eq = eq;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_0;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_2 = each_0.getModifier();\n\t\t\tif (modifier_2 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_1 = modifier_2.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_1 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_1.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility_1 == &lt;%java_.Java_Tables%&gt;.ELITid_protected;\n\t\t\tCAUGHT_eq_0 = eq_0;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; or = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanOrOperation%&gt;.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_eq_0);\n\t\tCAUGHT_or = or;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_or = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, CAUGHT_or);\n\tif (and_0 == null) {\n\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null body for \\\'Bag(T).select(Bag.T[?] | Lambda T() : Boolean[1]) : Bag(T)\\\'\");\n\t}\n\t//\n\tif (and_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_1.add(each_0);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.BodyDeclaration%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<BodyDeclaration> invisibleMethods();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * self_.compilationUnits.commentList-&gt;select(each |\n *   each.oclIsTypeOf(Javadoc))\n * -&gt;collect(o | o.oclAsType(Javadoc).tags)\n * .fragments-&gt;select(each | each.oclIsTypeOf(TextElement))\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nif (self_ == null) {\n\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Model::compilationUnits\\\'\");\n}\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.CompilationUnit%&gt;&gt; compilationUnits = self_.getCompilationUnits();\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; BOXED_compilationUnits = idResolver.createSetOfAll(&lt;%java_.Java_Tables%&gt;.SET_CLSSid_CompilationUnit, compilationUnits);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_Comment);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1 = BOXED_compilationUnits.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect_1;\nwhile (true) {\n\tif (!ITERATOR__1.hasNext()) {\n\t\tcollect_1 = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.CompilationUnit%&gt; _1 = (&lt;%java_.CompilationUnit%&gt;)ITERATOR__1.next();\n\t/**\n\t * commentList\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.Comment%&gt;&gt; commentList = _1.getCommentList();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_commentList = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_Comment, commentList);\n\t//\n\tfor (Object value : BOXED_commentList.flatten().getElements()) {\n\t\taccumulator.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_Comment);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = collect_1.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_0;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect_0 = accumulator_0;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.Comment%&gt; each = (&lt;%java_.Comment%&gt;)ITERATOR_each.next();\n\t/**\n\t * each.oclIsTypeOf(Javadoc)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_Javadoc_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_Javadoc, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each, TYP_java__c_c_Javadoc_0).booleanValue();\n\t//\n\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_0.add(each);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_TagElement);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_o = select_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect_0;\nwhile (true) {\n\tif (!ITERATOR_o.hasNext()) {\n\t\tcollect_0 = accumulator_1;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.Comment%&gt; o = (&lt;%java_.Comment%&gt;)ITERATOR_o.next();\n\t/**\n\t * o.oclAsType(Javadoc).tags\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_Javadoc_1 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_Javadoc, null);\n\tfinal /*@Thrown\052/ &lt;%java_.Javadoc%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%java_.Javadoc%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, o, TYP_java__c_c_Javadoc_1));\n\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.TagElement%&gt;&gt; tags = oclAsType.getTags();\n\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_tags = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_TagElement, tags);\n\t//\n\tfor (Object value : BOXED_tags.flatten().getElements()) {\n\t\taccumulator_1.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_ASTNode);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1_0 = collect_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect;\nwhile (true) {\n\tif (!ITERATOR__1_0.hasNext()) {\n\t\tcollect = accumulator_2;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.TagElement%&gt; _1_0 = (&lt;%java_.TagElement%&gt;)ITERATOR__1_0.next();\n\t/**\n\t * fragments\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt; fragments = _1_0.getFragments();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_fragments = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_ASTNode, fragments);\n\t//\n\tfor (Object value : BOXED_fragments.flatten().getElements()) {\n\t\taccumulator_2.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_ASTNode);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_0 = collect.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each_0.hasNext()) {\n\t\tselect = accumulator_3;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ASTNode%&gt; each_0 = (&lt;%java_.ASTNode%&gt;)ITERATOR_each_0.next();\n\t/**\n\t * each.oclIsTypeOf(TextElement)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_TextElement_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_TextElement, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf_0 = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each_0, TYP_java__c_c_TextElement_0).booleanValue();\n\t//\n\tif (oclIsTypeOf_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_3.add(each_0);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.ASTNode%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<ASTNode> textElementInJavadoc(Model self_);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * self_.compilationUnits.commentList-&gt;select(each |\n *   each.oclIsTypeOf(Javadoc))\n * -&gt;collect(o | o.oclAsType(Javadoc).tags)\n * .fragments-&gt;select(each | each.oclIsTypeOf(TextElement))\n * -&gt;select(each | each.oclAsType(TextElement).text.size() = 0)\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nif (self_ == null) {\n\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Model::compilationUnits\\\'\");\n}\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.CompilationUnit%&gt;&gt; compilationUnits = self_.getCompilationUnits();\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; BOXED_compilationUnits = idResolver.createSetOfAll(&lt;%java_.Java_Tables%&gt;.SET_CLSSid_CompilationUnit, compilationUnits);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_Comment);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1 = BOXED_compilationUnits.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect_1;\nwhile (true) {\n\tif (!ITERATOR__1.hasNext()) {\n\t\tcollect_1 = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.CompilationUnit%&gt; _1 = (&lt;%java_.CompilationUnit%&gt;)ITERATOR__1.next();\n\t/**\n\t * commentList\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.Comment%&gt;&gt; commentList = _1.getCommentList();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_commentList = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_Comment, commentList);\n\t//\n\tfor (Object value : BOXED_commentList.flatten().getElements()) {\n\t\taccumulator.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_Comment);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = collect_1.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_1;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect_1 = accumulator_0;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.Comment%&gt; each = (&lt;%java_.Comment%&gt;)ITERATOR_each.next();\n\t/**\n\t * each.oclIsTypeOf(Javadoc)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_Javadoc_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_Javadoc, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each, TYP_java__c_c_Javadoc_0).booleanValue();\n\t//\n\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_0.add(each);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_TagElement);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_o = select_1.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect_0;\nwhile (true) {\n\tif (!ITERATOR_o.hasNext()) {\n\t\tcollect_0 = accumulator_1;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.Comment%&gt; o = (&lt;%java_.Comment%&gt;)ITERATOR_o.next();\n\t/**\n\t * o.oclAsType(Javadoc).tags\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_Javadoc_1 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_Javadoc, null);\n\tfinal /*@Thrown\052/ &lt;%java_.Javadoc%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%java_.Javadoc%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, o, TYP_java__c_c_Javadoc_1));\n\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.TagElement%&gt;&gt; tags = oclAsType.getTags();\n\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_tags = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_TagElement, tags);\n\t//\n\tfor (Object value : BOXED_tags.flatten().getElements()) {\n\t\taccumulator_1.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_ASTNode);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1_0 = collect_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect;\nwhile (true) {\n\tif (!ITERATOR__1_0.hasNext()) {\n\t\tcollect = accumulator_2;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.TagElement%&gt; _1_0 = (&lt;%java_.TagElement%&gt;)ITERATOR__1_0.next();\n\t/**\n\t * fragments\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt; fragments = _1_0.getFragments();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_fragments = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_ASTNode, fragments);\n\t//\n\tfor (Object value : BOXED_fragments.flatten().getElements()) {\n\t\taccumulator_2.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_ASTNode);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_0 = collect.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_0;\nwhile (true) {\n\tif (!ITERATOR_each_0.hasNext()) {\n\t\tselect_0 = accumulator_3;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ASTNode%&gt; each_0 = (&lt;%java_.ASTNode%&gt;)ITERATOR_each_0.next();\n\t/**\n\t * each.oclIsTypeOf(TextElement)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_TextElement_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_TextElement, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf_0 = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each_0, TYP_java__c_c_TextElement_0).booleanValue();\n\t//\n\tif (oclIsTypeOf_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_3.add(each_0);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_4 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_ASTNode);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_1 = select_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each_1.hasNext()) {\n\t\tselect = accumulator_4;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ASTNode%&gt; each_1 = (&lt;%java_.ASTNode%&gt;)ITERATOR_each_1.next();\n\t/**\n\t * each.oclAsType(TextElement).text.size() = 0\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_TextElement_1 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_TextElement, null);\n\tfinal /*@Thrown\052/ &lt;%java_.TextElement%&gt; oclAsType_0 = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%java_.TextElement%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, each_1, TYP_java__c_c_TextElement_1));\n\tfinal /*@Thrown\052/ &lt;%java.lang.String%&gt; text = oclAsType_0.getText();\n\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.string.StringSizeOperation%&gt;.INSTANCE.evaluate(text);\n\tfinal /*@Thrown\052/ boolean eq = size.equals(&lt;%java_.Java_Tables%&gt;.INT_0);\n\t//\n\tif (eq == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_4.add(each_1);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.ASTNode%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.ASTNode%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<ASTNode> emptyTextElementInJavadoc(Model self_);

} // QueryCollection
