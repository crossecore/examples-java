/**
 */
package java_;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Test</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link java_.Test#getThrownExceptions <em>Thrown Exceptions</em>}</li>
 * </ul>
 *
 * @see java_.Java_Package#getTest()
 * @model
 * @generated
 */
public interface Test extends EObject {
	/**
	 * Returns the value of the '<em><b>Thrown Exceptions</b></em>' reference list.
	 * The list contents are of type {@link java_.TypeAccess}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Thrown Exceptions</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Thrown Exceptions</em>' reference list.
	 * @see java_.Java_Package#getTest_ThrownExceptions()
	 * @model derived="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='/**\n * Sequence{}\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ECORE_Sequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java.lang.Object%&gt;.class, &lt;%java_.Java_Tables%&gt;.Sequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java.lang.Object%&gt;&gt;)ECORE_Sequence;'"
	 * @generated
	 */
	EList<TypeAccess> getThrownExceptions();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model unique="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * ClassDeclaration.allInstances()\n * -&gt;collect(bodyDeclarations)\n * -&gt;select(each | each.oclIsTypeOf(MethodDeclaration))\n * -&gt;select(each |\n *   not each.modifier.oclIsUndefined() and\n *   not each.modifier.visibility.oclIsUndefined() and\n *   (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n *   ))\n * -&gt;asSequence()\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_ClassDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_ClassDeclaration, null);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; allInstances = &lt;%org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation%&gt;.INSTANCE.evaluate(executor, &lt;%java_.Java_Tables%&gt;.SET_CLSSid_ClassDeclaration, TYP_java__c_c_ClassDeclaration_0);\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR__1 = allInstances.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; collect;\nwhile (true) {\n\tif (!ITERATOR__1.hasNext()) {\n\t\tcollect = accumulator;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.ClassDeclaration%&gt; _1 = (&lt;%java_.ClassDeclaration%&gt;)ITERATOR__1.next();\n\t/**\n\t * bodyDeclarations\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; bodyDeclarations = _1.getBodyDeclarations();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%java_.Java_Tables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\n\t//\n\tfor (Object value : BOXED_bodyDeclarations.flatten().getElements()) {\n\t\taccumulator.add(value);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each = collect.iterator();\n/*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select_0;\nwhile (true) {\n\tif (!ITERATOR_each.hasNext()) {\n\t\tselect_0 = accumulator_0;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each.next();\n\t/**\n\t * each.oclIsTypeOf(MethodDeclaration)\n\t \052/\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_java__c_c_MethodDeclaration_0 = idResolver.getClass(&lt;%java_.Java_Tables%&gt;.CLSSid_MethodDeclaration, null);\n\tfinal /*@NonInvalid\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, each, TYP_java__c_c_MethodDeclaration_0).booleanValue();\n\t//\n\tif (oclIsTypeOf == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_0.add(each);\n\t}\n}\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt;.Accumulator accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createBagAccumulatorValue(&lt;%java_.Java_Tables%&gt;.BAG_CLSSid_BodyDeclaration);\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_each_0 = select_0.iterator();\n/*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.BagValue%&gt; select;\nwhile (true) {\n\tif (!ITERATOR_each_0.hasNext()) {\n\t\tselect = accumulator_1;\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%java_.BodyDeclaration%&gt; each_0 = (&lt;%java_.BodyDeclaration%&gt;)ITERATOR_each_0.next();\n\t/**\n\t *\n\t * not each.modifier.oclIsUndefined() and\n\t * not each.modifier.visibility.oclIsUndefined() and\n\t * (each.modifier.visibility = VisibilityKind::private or each.modifier.visibility = VisibilityKind::protected\n\t * )\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier = each_0.getModifier();\n\t\tfinal /*@NonInvalid\052/ boolean symbol_0 = modifier == null;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(symbol_0);\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_visibility;\n\t\ttry {\n\t\t\tif (modifier == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility = modifier.getVisibility();\n\t\t\tCAUGHT_visibility = visibility;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_visibility = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@NonInvalid\052/ boolean symbol_1 = CAUGHT_visibility instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;;\n\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; not_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(symbol_1);\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(not, not_0);\n\t\tCAUGHT_and = and;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_or;\n\ttry {\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_1 = each_0.getModifier();\n\t\t\tif (modifier_1 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_0 = modifier_1.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_0 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_0.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq = BOXED_visibility_0 == &lt;%java_.Java_Tables%&gt;.ELITid_private;\n\t\t\tCAUGHT_eq = eq;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_0;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java_.Modifier%&gt; modifier_2 = each_0.getModifier();\n\t\t\tif (modifier_2 == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java_\\\'::Modifier::visibility\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java_.VisibilityKind%&gt; visibility_1 = modifier_2.getVisibility();\n\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility_1 = &lt;%java_.Java_Tables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility_1.getName()));\n\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility_1 == &lt;%java_.Java_Tables%&gt;.ELITid_protected;\n\t\t\tCAUGHT_eq_0 = eq_0;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_eq_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; or = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanOrOperation%&gt;.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_eq_0);\n\t\tCAUGHT_or = or;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_or = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, CAUGHT_or);\n\tif (and_0 == null) {\n\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null body for \\\'Bag(T).select(Bag.T[?] | Lambda T() : Boolean[1]) : Bag(T)\\\'\");\n\t}\n\t//\n\tif (and_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\taccumulator_1.add(each_0);\n\t}\n}\nfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.SequenceValue%&gt; asSequence = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionAsSequenceOperation%&gt;.INSTANCE.evaluate(select);\nfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt; ECORE_asSequence = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%java_.BodyDeclaration%&gt;.class, asSequence);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%java_.BodyDeclaration%&gt;&gt;)ECORE_asSequence;'"
	 * @generated
	 */
	EList<BodyDeclaration> thrownExceptions2();

} // Test
